# Luke's lf settings

# Basic vars
set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
#set color256 true
set icons
set drawbox
set period 1
set ratios '1:2:2'
#set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

# Vars that depend on environmental variables
$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope"

# cmds/functions
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
	image/x-xcf|image/svg+xml) setsid -f gimp $f >/dev/null 2>&1 ;;
    #image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" | sxiv -aio 2>/dev/null | lf-select ;;
	image/*) setsid -f sxiv $f 2>/dev/null ;;
	audio/*) setsid -f mpv --audio-display=attachment --force-window $f >/dev/null 2>&1;;
	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
	application/pdf|application/vnd*) setsid -f zathura $fx >/dev/null 2>&1 ;;
	application/vnd.openxmlformats-officedocument.wordprocessingml.document*) setsid -f lowriter $fx >/dev/null 2>&1 ;;
	application/vnd.oasis.opendocument.spreadsheet*) setsid -f localc $fx >/dev/null 2>&1 ;;
        *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd delete ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
	[ $ans = "y" ] && rm -rf $fx
}}

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd setbg "$1"
cmd bulkrename $vidir

# Bindings
map d
map <c-f> $lf -remote "send $id select '$(fzf)'"
map J $lf -remote "send $id cd $(cut -d'	' -f2 ${XDG_CONFIG_HOME:-$HOME/.config}/directories | fzf)"
map gh
map gg top
map DD delete
map <esc> clear
map y copy
map m cut
map p paste
map . set hidden!
map <c-n> push :mkdir<space>
map <c-r> reload
map <enter> shell
map x $$f
map X !$f
map o &mimeopen $f
map O $mimeopen --ask $f
map ds $du -sh $f | awk '{print $1}' | xargs notify-send

map A rename # at the very end
map c push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extention
map a push A<a-b> # after extention
map B bulkrename
map b $setbg $f

map <c-e> down
map <c-y> up
map V push :!nvim<space>

# Archive Mappings
map zz zip
map zt tar
map zg targz
map zb targz
map zu unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Movement

map gh cd /home/joao
map gtr cd ~/.local/share/Trash/files

map gv. cd ~/videos

map gm. cd ~/music

map gi. cd ~/pictures
map gis cd ~/pictures/screenshots
map giw cd ~/pictures/wallpapers

map ge cd ~/docs/est
map gl. cd ~/docs/est/ling
map glc cd ~/docs/est/ling/lc
map glpy cd ~/docs/est/ling/lc/ptn
map gle cd ~/docs/est/ling/estruturalismo
map glg cd ~/docs/est/ling/gerativismo
map glso cd ~/docs/est/ling/semiotica
map glsa cd ~/docs/est/ling/semantica
map gL. cd ~/docs/est/lit
map gLa cd ~/docs/est/lit/africana
map gLb cd ~/docs/est/lit/brasileira
map gLp cd ~/docs/est/lit/portuguesa
map glog cd ~/docs/est/fil/logica
map gufc cd ~/docs/est/ufc
map g202 cd ~/docs/est/ufc/202/
map g211 cd ~/docs/est/ufc/211/

map gal cd ~/docs/all/

map gtx cd ~/docs/tex/

map gd cd ~/docs

map gD cd ~/docs/downloads

map gpy cd ~/docs/est/prog/python

map gmo cd ~/docs/est/ufc/monitoria-pid/

map gC cd ~/.config
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share 
